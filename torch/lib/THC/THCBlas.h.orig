#ifndef THC_BLAS_INC
#define THC_BLAS_INC

#include "THCGeneral.h"
#include "THCHalf.h"

/* Level 1 */
<<<<<<< HEAD
THC_API float THCudaBlas_Sdot(THCState *state, long n, float *x, long incx,
                              float *y, long incy);
THC_API double THCudaBlas_Ddot(THCState *state, long n, double *x, long incx,
                               double *y, long incy);
THC_API ccx THCudaBlas_Cdot(THCState *state, long n, ccx *x, long incx, ccx *y,
                            long incy);
THC_API zcx THCudaBlas_Zdot(THCState *state, long n, zcx *x, long incx, zcx *y,
                            long incy);
#ifdef CUDA_HALF_TENSOR
THC_API float THCudaBlas_Hdot(THCState *state, long n, half *x, long incx,
                              half *y, long incy);
#endif

/* Level 2 */
THC_API void THCudaBlas_Sgemv(THCState *state, char trans, long m, long n,
                              float alpha, float *a, long lda, float *x,
                              long incx, float beta, float *y, long incy);
THC_API void THCudaBlas_Dgemv(THCState *state, char trans, long m, long n,
                              double alpha, double *a, long lda, double *x,
                              long incx, double beta, double *y, long incy);
THC_API void THCudaBlas_Cgemv(THCState *state, char trans, long m, long n,
                              ccx alpha, ccx *a, long lda, ccx *x, long incx,
                              ccx beta, ccx *y, long incy);
THC_API void THCudaBlas_Zgemv(THCState *state, char trans, long m, long n,
                              zcx alpha, zcx *a, long lda, zcx *x, long incx,
                              zcx beta, zcx *y, long incy);

THC_API void THCudaBlas_Sger(THCState *state, long m, long n, float alpha,
                             float *x, long incx, float *y, long incy, float *a,
                             long lda);
THC_API void THCudaBlas_Dger(THCState *state, long m, long n, double alpha,
                             double *x, long incx, double *y, long incy,
                             double *a, long lda);
THC_API void THCudaBlas_Cger(THCState *state, long m, long n, ccx alpha, ccx *x,
                             long incx, ccx *y, long incy, ccx *a, long lda);
THC_API void THCudaBlas_Zger(THCState *state, long m, long n, zcx alpha, zcx *x,
                             long incx, zcx *y, long incy, zcx *a, long lda);

/* Level 3 */
THC_API void THCudaBlas_Sgemm(THCState *state, char transa, char transb, long m,
                              long n, long k, float alpha, float *a, long lda,
                              float *b, long ldb, float beta, float *c,
                              long ldc);
THC_API void THCudaBlas_Dgemm(THCState *state, char transa, char transb, long m,
                              long n, long k, double alpha, double *a, long lda,
                              double *b, long ldb, double beta, double *c,
                              long ldc);
THC_API void THCudaBlas_Cgemm(THCState *state, char transa, char transb, long m,
                              long n, long k, ccx alpha, ccx *a, long lda,
                              ccx *b, long ldb, ccx beta, ccx *c, long ldc);
THC_API void THCudaBlas_Zgemm(THCState *state, char transa, char transb, long m,
                              long n, long k, zcx alpha, zcx *a, long lda,
                              zcx *b, long ldb, zcx beta, zcx *c, long ldc);

#ifdef CUDA_HALF_TENSOR
THC_API void THCudaBlas_Hgemm(THCState *state, char transa, char transb, long m,
                              long n, long k, half alpha, half *a, long lda,
                              half *b, long ldb, half beta, half *c, long ldc);
#endif

THC_API void THCudaBlas_SgemmBatched(THCState *state, char transa, char transb,
                                     long m, long n, long k, float alpha,
                                     const float *a[], long lda,
                                     const float *b[], long ldb, float beta,
                                     float *c[], long ldc, long batchCount);
THC_API void THCudaBlas_DgemmBatched(THCState *state, char transa, char transb,
                                     long m, long n, long k, double alpha,
                                     const double *a[], long lda,
                                     const double *b[], long ldb, double beta,
                                     double *c[], long ldc, long batchCount);
THC_API void THCudaBlas_CgemmBatched(THCState *state, char transa, char transb,
                                     long m, long n, long k, ccx alpha,
                                     const ccx *a[], long lda, const ccx *b[],
                                     long ldb, ccx beta, ccx *c[], long ldc,
                                     long batchCount);
#if CUDA_VERSION >= 8000
THC_API void THCudaBlas_SgemmStridedBatched(
    THCState *state, char transa, char transb, long m, long n, long k,
    float alpha, const float *a, long lda, long strideA, const float *b,
    long ldb, long strideB, float beta, float *c, long ldc, long strideC,
    long batchCount);
THC_API void THCudaBlas_DgemmStridedBatched(
    THCState *state, char transa, char transb, long m, long n, long k,
    double alpha, const double *a, long lda, long strideA, const double *b,
    long ldb, long strideB, double beta, double *c, long ldc, long strideC,
    long batchCount);
=======
THC_API float THCudaBlas_Sdot(THCState *state, int64_t n, float *x, int64_t incx, float *y, int64_t incy);
THC_API double THCudaBlas_Ddot(THCState *state, int64_t n, double *x, int64_t incx, double *y, int64_t incy);
#ifdef CUDA_HALF_TENSOR
THC_API float THCudaBlas_Hdot(THCState *state, int64_t n, half *x, int64_t incx, half *y, int64_t incy);
#endif

/* Level 2 */
THC_API void THCudaBlas_Sgemv(THCState *state, char trans, int64_t m, int64_t n, float alpha, float *a, int64_t lda, float *x, int64_t incx, float beta, float *y, int64_t incy);
THC_API void THCudaBlas_Dgemv(THCState *state, char trans, int64_t m, int64_t n, double alpha, double *a, int64_t lda, double *x, int64_t incx, double beta, double *y, int64_t incy);
THC_API void THCudaBlas_Sger(THCState *state, int64_t m, int64_t n, float alpha, float *x, int64_t incx, float *y, int64_t incy, float *a, int64_t lda);
THC_API void THCudaBlas_Dger(THCState *state, int64_t m, int64_t n, double alpha, double *x, int64_t incx, double *y, int64_t incy, double *a, int64_t lda);

/* Level 3 */
THC_API void THCudaBlas_Sgemm(THCState *state, char transa, char transb, int64_t m, int64_t n, int64_t k, float alpha, float *a, int64_t lda, float *b, int64_t ldb, float beta, float *c, int64_t ldc);
THC_API void THCudaBlas_Dgemm(THCState *state, char transa, char transb, int64_t m, int64_t n, int64_t k, double alpha, double *a, int64_t lda, double *b, int64_t ldb, double beta, double *c, int64_t ldc);

#ifdef CUDA_HALF_TENSOR
THC_API void THCudaBlas_Hgemm(THCState *state, char transa, char transb, int64_t m, int64_t n, int64_t k, half alpha, half *a, int64_t lda, half *b, int64_t ldb, half beta, half *c, int64_t ldc);
#endif

THC_API void THCudaBlas_SgemmBatched(THCState *state, char transa, char transb, int64_t m, int64_t n, int64_t k,
                                     float alpha, const float *a[], int64_t lda, const float *b[], int64_t ldb,
                                     float beta, float *c[], int64_t ldc, int64_t batchCount);
THC_API void THCudaBlas_DgemmBatched(THCState *state, char transa, char transb, int64_t m, int64_t n, int64_t k,
                                     double alpha, const double *a[], int64_t lda, const double *b[], int64_t ldb,
                                     double beta, double *c[], int64_t ldc, int64_t batchCount);
#if CUDA_VERSION >= 8000
THC_API void THCudaBlas_SgemmStridedBatched(THCState *state, char transa, char transb, int64_t m, int64_t n, int64_t k,
                                     float alpha, const float *a, int64_t lda, int64_t strideA, const float *b, int64_t ldb, int64_t strideB,
                                     float beta, float *c, int64_t ldc, int64_t strideC, int64_t batchCount);
THC_API void THCudaBlas_DgemmStridedBatched(THCState *state, char transa, char transb, int64_t m, int64_t n, int64_t k,
                                     double alpha, const double *a, int64_t lda, int64_t strideA, const double *b, int64_t ldb, int64_t strideB, 
                                     double beta, double *c, int64_t ldc, int64_t strideC, int64_t batchCount);
>>>>>>> upstream/master
#endif

THC_API void THCudaBlas_ZgemmBatched(THCState *state, char transa, char transb,
                                     long m, long n, long k, zcx alpha,
                                     const zcx *a[], long lda, const zcx *b[],
                                     long ldb, zcx beta, zcx *c[], long ldc,
                                     long batchCount);
/* Inverse */
THC_API void THCudaBlas_Sgetrf(THCState *state, int n, float **a, int lda,
                               int *pivot, int *info, int batchSize);
THC_API void THCudaBlas_Dgetrf(THCState *state, int n, double **a, int lda,
                               int *pivot, int *info, int batchSize);
THC_API void THCudaBlas_Cgetrf(THCState *state, int n, ccx **a, int lda,
                               int *pivot, int *info, int batchSize);
THC_API void THCudaBlas_Zgetrf(THCState *state, int n, zcx **a, int lda,
                               int *pivot, int *info, int batchSize);

THC_API void THCudaBlas_Sgetrs(THCState *state, char transa, int n, int nrhs,
                               const float **a, int lda, int *pivot, float **b,
                               int ldb, int *info, int batchSize);
THC_API void THCudaBlas_Dgetrs(THCState *state, char transa, int n, int nrhs,
                               const double **a, int lda, int *pivot,
                               double **b, int ldb, int *info, int batchSize);
THC_API void THCudaBlas_Cgetrs(THCState *state, char transa, int n, int nrhs,
                               const ccx **a, int lda, int *pivot, ccx **b,
                               int ldb, int *info, int batchSize);
THC_API void THCudaBlas_Zgetrs(THCState *state, char transa, int n, int nrhs,
                               const zcx **a, int lda, int *pivot, zcx **b,
                               int ldb, int *info, int batchSize);

THC_API void THCudaBlas_Sgetri(THCState *state, int n, const float **a, int lda,
                               int *pivot, float **c, int ldc, int *info,
                               int batchSize);
THC_API void THCudaBlas_Dgetri(THCState *state, int n, const double **a,
                               int lda, int *pivot, double **c, int ldc,
                               int *info, int batchSize);
THC_API void THCudaBlas_Cgetri(THCState *state, int n, const ccx **a, int lda,
                               int *pivot, ccx **c, int ldc, int *info,
                               int batchSize);
THC_API void THCudaBlas_Zgetri(THCState *state, int n, const zcx **a, int lda,
                               int *pivot, zcx **c, int ldc, int *info,
                               int batchSize);

#endif
